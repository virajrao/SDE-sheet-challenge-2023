
######### search in a 2D matrix  ######### 

public boolean binarysearch(int[] nums,int value){
    int start =  0;
    int end=  nums.length - 1;

        while(start <= end){
            int mid = (start + end)/2;
            
            if(nums[mid] == value)
                return true;            
            
            if(nums[mid] > value)
                end = mid - 1;
                
            else
                start = mid + 1;

        }   
    
    return false;
}
   
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;  // length of the row 
        int n = matrix[0].length; // length of the column 

        int start = 0;
        int end = m*n - 1;

            while(start <= end){
                int mid = (start + end)/2;
               
                int rowInd = mid/n;
                int colInd = mid % n;
               
                if(matrix[rowInd][colInd] == target)
                    return true;
                

                
                else if(matrix[rowInd][colInd] < target)
                            start  = mid + 1;
                
                
                else
                    end = mid - 1;
            }
            return false;
    }


######   Pow(X,N)    ########

    public double myPow(double x, int n) {
        // // making the brute force approach
        // long nn = n;
        
        // if(n < 0){
        //     n = -n;  
        // }
        // double ans = 1.0;
        // for(int i=0;i<n;i++){
        //     ans = ans*x;
        // }
                
        // if(nn < 0)
        //     return (double)1.0/(double)ans;
        // else 
        //     return ans;



        // Optimised solution
        long nn = n;
        if(n<0)
            nn = -nn;

        double ans = 1.0;
        
        while(nn>0){
            if(nn % 2 == 0){
                x = x*x;
                nn = nn/2;
            }
            else{ 
                ans = ans*x;
                nn = nn-1;
            }  
        
        }
        
        if(n < 0)
            return (double)(1.0)/(double)(ans);

        return ans;
    }

######### Majority Element(n/2)   #########
 
 // Optimised approach 
    int max = 0;
    int count = 0;
    int n = nums.length;

        for(int i=0;i<n;i++){
            if(count == 0)
                max = nums[i];

            if(max == nums[i]){
                count++;
            }
            else
              count--; 

        }
        return max;
    }


######### Majority Element(n/3)   #########
 
 public List<Integer> majorityElement(int[] nums) {
        ArrayList<Integer>ls1 = new ArrayList<>();
        // extending the boye's moore algorithm for the following one 
        
        int el1 = Integer.MAX_VALUE;
        int cnt1 = 0;

        int el2 =  Integer.MAX_VALUE;
        int cnt2 = 0;
        
        int n = nums.length;
        
        for(int i=0;i<n;i++){
            if(cnt1 == 0 && el2 != nums[i]){
              el1 = nums[i];
              cnt1++;    
            }
            
            else if(cnt2 ==0 && el1 != nums[i]){
              el2 = nums[i];
              cnt2++;    
            }
            
            else if(el1 == nums[i]){
                cnt1++;
            }
            else if(el2 == nums[i]){
                cnt2++;
            }
            else{
                cnt1--;
                cnt2--;
            }
        }

 int ncnt1 = 0;
 int ncnt2 = 0;
        
// now iterating and checking for them
        for(int i=0;i<n;i++){
           if(el1 == nums[i]) 
                ncnt1++;
            
            if(el2 == nums[i])
                ncnt2++;

        }
        
        if(ncnt1 > n/3)
            ls1.add(el1);
        
        if(ncnt2 > n/3)
            ls1.add(el2);
     
     return ls1;
    }


######### Grid Unique Paths #########

  public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i == 0 && j == 0){
                    dp[0][0] = 1;
                    continue;
                }

                int up = 0;
                int left = 0;

            if(i>0)
                up = dp[i-1][j]; 

            if(j>0)
                 left = dp[i][j-1];

            dp[i][j] = up + left;
          
         }    
    }
    return dp[m-1][n-1];
    }


######### Reverse Pairs (Leetcode) #########

public int merge(int low,int high,int mid,int []nums){
        //At first calculating the pairs  
        int pairs = 0;
        int j =mid+1;
        
        for(int i=low;i<=mid;i++){
            while(j<=high && (long)nums[i] >(long) 2 * nums[j]){
                j++;
               
            }pairs+=j-(mid+1);
        } 
ArrayList<Integer>arr=new ArrayList<>();
        int left=low,right=mid+1;
        while(left<=mid && right<=high){
            if(nums[left]<=nums[right]){
                arr.add(nums[left++]);
            }else{
                arr.add(nums[right++]);
            }
        }
        while(left<=mid){
                arr.add(nums[left++]);
            }
        while(right<=high){
                arr.add(nums[right++]);
            }
        for(int i=low;i<=high;i++){
            nums[i]=arr.get(i-low);
        }

        return pairs;
    }
    
    public int mergeSort(int low,int high,int []nums){
        if(low >=high)
            return 0;

        int val = 0;
        int mid =(low + high)/2;
        val += mergeSort(low,mid,nums);
        val += mergeSort(mid+1,high,nums);
        val += merge(low,high,mid,nums);

        return val;
    }
    
    
    public int reversePairs(int[] nums) {
       return mergeSort(0,nums.length-1,nums);
    }







    
