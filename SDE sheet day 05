 ##########  Reverse a LinkedList ########
 public ListNode helperReverseList(ListNode head){
       
        if(head == null || head.next == null){
            return head;
        }
            newhead =  helperReverseList(head.next);
            head.next.next = head;
            head.next = null;
            return newhead; 
    }

    public ListNode reverseList(ListNode head) {
        
        ListNode ans = helperReverseList(head,newhead);
        
        return ans;
 
    }

########## Find the middle of LinkedList ########
 
public static Node findMiddle(Node head)
    {
       Node fast = head;
       Node slow = head;

        while(fast!= null && fast.next != null){
                fast = fast.next.next;
                slow = slow.next;
        }
        
        return slow;
    }

########## Merge two sorted Linked List (use method u…) ########

public static LinkedListNode<Integer> sortTwoLists(LinkedListNode<Integer> first, LinkedListNode<Integer> second) {
		
        LinkedListNode<Integer> result = new LinkedListNode<Integer>(-1);
         

	     LinkedListNode<Integer> newhead =result;
        result.next = first;
        
        while(first != null && second != null){
            if(first.data < second.data){
                result.next = first;
                first = first.next;
            }
            
            else {
                result.next = second;
                second = second.next;  
            } 
            
            result = result.next;
        }
        
        while(first != null){
            result.next = first;
            first = first.next;
            result = result.next;   
        }
        
        while(second != null){
            result.next = second;
            second = second.next;
            result = result.next;
        }
        
        result.next = null;
        return newhead.next;
    }


############  	Remove N-th node from back of LinkedList   ###########
 
public ListNode removeNthFromEnd(ListNode head, int n) {
        
        ListNode fast = head;
        ListNode slow = head;

        for(int i=0;i<n;i++){
            fast = fast.next;
        }   
        
        if(fast == null)
            return head.next;
        
        
        while(fast.next != null){
            slow = slow.next;
            fast = fast.next;
        }

        slow.next = slow.next.next;
        return head;
    }

############  	Add two numbers as LinkedList   ###########

 public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyhead = new ListNode(-1);
        ListNode tail = dummyhead;
        int carry = 0;

        while(l1 != null || l2 != null || carry != 0){
         int dig1 = (l1 != null)?l1.val:0; 
         int dig2 = (l2 != null)?l2.val:0;
        
            int sum = dig1 + dig2 + carry;
            int digit = sum % 10;
            carry = sum / 10;
        
            ListNode newnode = new ListNode(digit);  
            tail.next = newnode;   
            tail = tail.next;
        
            l1 = (l1 !=null)?l1.next:null; 
            l2 =  (l2 !=null)?l2.next:null;  
        }
        tail.next = null;
        return dummyhead.next; 
    }



############  		Delete a given Node when a node is given.(…   ###########
public void deleteNode(ListNode node) {
          node.val = node.next.val ;
        node.next = node.next.next;
    }



