# Striver Day 01 SDE sheet challenge


#####  Set Matrix Zeros #######    
 public void setZeroes(int[][] matrix) {
    HashSet<Integer>rowset = new HashSet<Integer>();
    HashSet<Integer>colset = new HashSet<Integer>();

    int row = matrix.length;
    int col = matrix[0].length;
        
    // doing a search on the rows and columns  
    for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
            if(matrix[i][j] == 0){
                rowset.add(i);
                colset.add(j);
            }
        }
    }    
// setting the row as 0
        for(int i:rowset){
            for(int j=0;j<col;j++){
                matrix[i][j] = 0;
            }
        }
        
// setting the column as 0 
        for(int j:colset){
            for(int i=0;i<row;i++){
                matrix[i][j] = 0;
            }
        }
    }




	#########  Pascal's Triangle #########

    public List<List<Integer>> generate(int numRows) {
		
		List<Integer>prevlist = new ArrayList<Integer>();
		List<Integer>newlist;
		List<List<Integer>>headerlist = new ArrayList<List<Integer>>();
		prevlist.add(1);
		headerlist.add(prevlist);
		
		for(int j=1;j<numRows;j++) {
			newlist = new ArrayList<>();  
		    
			newlist.add(1);
				for(int i=0;i<prevlist.size()-1;i++) {
				newlist.add(prevlist.get(i) +prevlist.get(i+1));
		}      
			newlist.add(1);
			prevlist = newlist;
			headerlist.add(newlist);
		}
    	return headerlist;
       }









########  Next Permutation ########

 public void reverse(int []nums,int strt){
        int n = nums.length;
        int i = strt;
        int j =  n-1;
        
        while(i<j){
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
    } 

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        // working on the 3 steps in this 
        // step 1  finding the breakpoint in this
            int idx = -1;             
            for(int i=n-2;i>=0;i--){
                if(nums[i] < nums[i+1]){
                    idx = i; 
                    break;
                }
            }         
    
    // if no breakpoint found then reverse and return 
            if(idx == -1){
                reverse(nums,0);
            }
         
         else{
            //  step 2 start comparing from behind and find the one that is nearest 
            for(int i=n-1;i>=idx;i--){
                if(nums[i] > nums[idx]){
                    int temp = nums[i];
                    nums[i] = nums[idx];
                    nums[idx] = temp;
                    break;
                }
            }

            // now reverse the array and it  is done
            reverse(nums,idx+1);
         }       
    }






######## Kadane's Algorithm ########
  
public int maxSubArray(int[] arr) {
      int maxi = Integer.MIN_VALUE;

        int n = arr.length;
        if(n == 1)
            return arr[0];

        int sum = 0;
        
        for(int i=0;i<n;i++){
            sum+= arr[i];
            maxi = Math.max(maxi,sum); 
            
            if(sum<0)
                sum = 0;
        }
        return maxi;
    }








###### Sort an array of 0's, 1's and 2's #########
 
  public void sortColors(int[] nums) {
 int low  = 0;
 int mid = 0;
 int high = nums.length-1;
        // iterating using the mid value over the array
        while(mid <= high){
            switch(nums[mid]){
                case 0:
                    int temp = nums[low]; 
                    nums[low] = nums[mid];
                    nums[mid]=  temp; 
                    low++;
                    mid++;
                    break;

                case 1:
                    mid++;
                    break;

                case 2:
                    temp = nums[high]; 
                    nums[high] = nums[mid];
                    nums[mid]=  temp;
                    high--; 
                    break;

            }
       }
    }



###### Stock Buy and Sell ##########

public static int maximumProfit(ArrayList<Integer> prices){

        int mini = prices.get(0);
        int profit = 0; 
        int n = prices.size();

        for(int i=1;i<n;i++){
            
            int cost = prices.get(i)-mini;
            profit = Math.max(cost,profit);
            mini = Math.min(mini,prices.get(i));
        }
        return profit;
    }
